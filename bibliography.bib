@inproceedings{DQBFStateOfArt,
author={Gergely Kov{\'a}sznai},
title={What is the state-of-the-art in DQBF solving},
year=2016,
booktitle={MaCS-16. Joint Conference on Mathematics and Computer Science},
url={http://ceur-ws.org/Vol-2046/kovasznai.pdf}
}

%dat tu ten talk z 2015 tiez??
@misc{DQBFStateOfArtTalk,
title= {A Survey on DQBF: Formulas, Applications, Solving Approaches },
author = {Gergely Kov{\'a}sznai},
year = {2015},
note= {Talk given at International Workshop on Quantification -- QUANTIFY 2015},
URL= {http://fmv.jku.at/quantify15/Kovasznai_QUANTIFY2015.pdf},
}

@InProceedings{DQBFStateOfArtNew,
author="Scholl, Christoph
and Wimmer, Ralf",
editor="Beyersdorff, Olaf
and Wintersteiger, Christoph M.",
title="Dependency Quantified Boolean Formulas: An Overview of Solution Methods and Applications",
booktitle="Theory and Applications of Satisfiability Testing -- SAT 2018",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="3--16",
abstract="Dependency quantified Boolean formulas (DQBFs) as a generalization of quantified Boolean formulas (QBFs) have received considerable attention in research during the last years. Here we give an overview of the solution methods developed for DQBF so far. The exposition is complemented with the discussion of various applications that can be handled with DQBF solving.",
doi="10.1007/978-3-319-94144-8_1",
isbn="978-3-319-94144-8"
}

@inproceedings{DPLLalgorithm,
  title={A DPLL Algorithm for Solving DQBF},
  author={Andreas Fr{\"o}hlich and Gergely Kov{\'a}sznai and Armin Biere},
  booktitle={Pragmatics of SAT (PoS 2012, aff. to SAT 2012)},
  year={2012}
}

@InProceedings{dCAQE,
author="Tentrup, Leander
and Rabe, Markus N.",
editor="Janota, Mikol{\'a}{\v{s}}
and Lynce, In{\^e}s",
title="Clausal Abstraction for DQBF",
booktitle="Theory and Applications of Satisfiability Testing -- SAT 2019",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="388--405",
abstract="Dependency quantified Boolean formulas (DQBF) is a logic admitting existential quantification over Boolean functions, which allows us to elegantly state synthesis problems in verification such as the search for invariants, programs, or winning regions of games. In this paper, we lift the clausal abstraction algorithm for quantified Boolean formulas (QBF) to DQBF. Clausal abstraction for QBF is an abstraction refinement algorithm that operates on a sequence of abstractions that represent the different quantifier levels. For DQBF we need to generalize this principle to partial orders of abstractions. The two challenges to overcome are: (1) Clauses may contain literals with incomparable dependencies, which we address by the recently proposed proof rule called Fork Extension, and (2) existential variables may have spurious dependencies, which we prevent by tracking consistency requirements during the execution. Our implementation {\$}{\$}{\backslash}textsc {\{}dCAQE{\}}{\$}{\$}solves significantly more formulas than the existing DQBF algorithms.",
doi="10.1007/978-3-030-24258-9_27",
isbn="978-3-030-24258-9"
}

@inproceedings{iDQandDQDIMACS,
  author    = {Andreas Fr{\"o}hlich and Gergely Kov{\'a}sznai and Armin Biere and Helmut Veith},
  title     = {iDQ: Instantiation-Based DQBF Solving},
  booktitle = {POS-14. Fifth Pragmatics of SAT workshop},
  editor    = {Daniel Le Berre},
  series    = {EPiC Series in Computing},
  volume    = {27},
  pages     = {103--116},
  year      = {2014},
  publisher = {EasyChair},
  bibsource = {EasyChair, https://easychair.org},
  issn      = {2398-7340},
  url       = {https://easychair.org/publications/paper/PRV},
  doi       = {10.29007/1s5k}
}

@INPROCEEDINGS{HQSsimpleAlg,
author={Karina {Gitina} and Sven {Reimer} and Matthias {Sauer} and Ralf {Wimmer} and Christoph {Scholl} and Bernd {Becker}},
booktitle={2013 IEEE 31st International Conference on Computer Design (ICCD)},
title={Equivalence checking of partial designs using dependency quantified Boolean formulae},
year={2013},
volume={},
number={},
pages={396-403},
keywords={Boolean functions;logic design;equivalence checking;partial designs;dependency quantified Boolean formulae;combinational circuit;linear transformation;PEC;DQBF;quantifier elimination;QBF approximations;Approximation methods;Approximation algorithms;Logic gates;Combinational circuits;Complexity theory;Algorithm design and analysis;System analysis and design},
doi={10.1109/ICCD.2013.6657071},
ISSN={1063-6404},
month={Oct},
}

@INPROCEEDINGS{HQSquantifierElimination,
author={Karina {Gitina} and Ralf {Wimmer} and Sven {Reimer} and Matthias {Sauer} and Christoph {Scholl} and Bernd {Becker}},
booktitle={2015 Design, Automation Test in Europe Conference Exhibition (DATE)},
title={Solving DQBF through quantifier elimination},
year={2015},
volume={},
number={},
pages={1617-1622},
keywords={Boolean functions;computational complexity;optimisation;DQBF;dependency quantified Boolean formulas;quantifier elimination strategy;QBF solver;incomplete combinational circuit verification;NP-complete SAT problem;Logic gates;Syntactics;Benchmark testing;Inverters;Boolean functions;Automation;Europe},
doi={10.7873/DATE.2015.0098},
ISSN={1558-1101},
month={March},
}

@InProceedings{HQSdependencyElimination,
author="Wimmer, Ralf
and Karrenbauer, Andreas
and Becker, Ruben
and Scholl, Christoph
and Becker, Bernd",
editor="Gaspers, Serge
and Walsh, Toby",
title="From DQBF to QBF by Dependency Elimination",
booktitle="Theory and Applications of Satisfiability Testing -- SAT 2017",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="326--343",
abstract="In this paper, we propose the elimination of dependencies to convert a given dependency quantified Boolean formula (DQBF) to an equisatisfiable QBF. We show how to select a set of dependencies to eliminate such that we arrive at a smallest equisatisfiable QBF in terms of existential variables that is achievable using dependency elimination. This approach is improved by taking so-called don't-care dependencies into account, which result from the application of dependency schemes to the formula and can be added to or removed from the formula at no cost. We have implemented this new method in the state-of-the-art DQBF solver HQS. Experiments show that dependency elimination is clearly superior to the previous method using variable elimination.",
isbn="978-3-319-66263-3",
doi="10.1007/978-3-319-66263-3_21"
}

@INPROCEEDINGS{HQSquantifierLocalization,
author={Aile {Ge-Ernst} and Christoph {Scholl} and Ralf {Wimmer}},
booktitle={2019 Formal Methods in Computer Aided Design (FMCAD)},
title={Localizing Quantifiers for DQBF},
year={2019},
volume={},
number={},
pages={184-192},
keywords={Boolean functions;logic circuits;prenex form;quantifier localization;Boolean formulas;DQBF benchmarks;Semantics;Syntactics;Boolean functions;Benchmark testing;Transforms;Input variables;Encoding},
doi={10.23919/FMCAD.2019.8894269},
ISSN={2641-8177},
month={Oct},
}

@INPROCEEDINGS{AIGSolve,
author={F. {Pigorsch} and C. {Scholl}},
booktitle={Design Automation Conference},
title={An AIG-based QBF-solver using SAT for preprocessing},
year={2010},
volume={},
number={},
pages={170-175},
keywords={binary decision diagrams;Boolean functions;graph theory;logic gates;AIG-based QBF-solver;SAT-solver;quantified boolean formulas;and-inverter graphs;cofactor-based quantifier elimination method;BDD;QBF preprocessing;Data structures;Boolean functions;Data preprocessing;Acceleration;Permission;Binary decision diagrams;Computer aided engineering;Algorithm design and analysis;Councils;Collaborative work;Quantified Boolean Formulas;Boolean Satisfiability},
doi={10.1145/1837274.1837318},
ISSN={0738-100X},
month={June},
}

@InProceedings{iProver,
author="Korovin, Konstantin",
editor="Armando, Alessandro
and Baumgartner, Peter
and Dowek, Gilles",
title="iProver -- An Instantiation-Based Theorem Prover for First-Order Logic (System Description)",
booktitle="Automated Reasoning",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="292--298",
abstract="iProver is an instantiation-based theorem prover which is based on Inst-Gen calculus, complete for first-order logic. One of the distinctive features of iProver is a modular combination of instantiation and propositional reasoning. In particular, any state-of-the art SAT solver can be integrated into our framework. iProver incorporates state-of-the-art implementation techniques such as indexing, redundancy elimination, semantic selection and saturation algorithms. Redundancy elimination implemented in iProver include: dismatching constraints, blocking non-proper instantiations and propositional-based simplifications. In addition to instantiation, iProver implements ordered resolution calculus and a combination of instantiation and ordered resolution. In this paper we discuss the design of iProver and related implementation issues.",
isbn="978-3-540-71070-7",
doi="10.1007/978-3-540-71070-7_24"
}

@TECHREPORT{FRAIGs,
    author = {Alan Mishchenko and Satrajit Chatterjee and Robert Brayton},
    title = {FRAIGs: A unifying representation for logic synthesis and verification},
    institution = {EECS Dept., UC Berkeley},
    month = {March},
    year = {2005}
}